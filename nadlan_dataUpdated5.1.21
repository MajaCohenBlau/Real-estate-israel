{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Accessing real estate data and prep it for analysis and predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. access the files in the directory and opening them as pandas\n",
    "2. concatenating all the files in one pandas dataframe\n",
    "3. dataframe manipulation\n",
    "   \n",
    "    __a. drop columns__\n",
    "    \n",
    "    columns = ['Unnamed: 0', 'DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS','NEWPROJECTTEXT','PROJECTNAME','YEARBUILT','KEYVALUE', 'TYPE', \n",
    "'POLYGON_ID', 'TREND_IS_NEGATIVE', 'TREND_FORMAT'])\n",
    "    \n",
    "    __b. rename columns__\n",
    "    \n",
    "    nadlan_rehovot.columns = ['gush_helka', 'description', 'room number', 'floor',\n",
    "       'surface area', 'price', 'building year', 'total floor in building' ]\n",
    "    \n",
    "    __c. split adress and get gush number__\n",
    "    \n",
    "    nadlan_rehovot[['gush_number', 'helka1','helka2']] = nadlan_rehovot['gush_helka'].str.split('-', expand=True)\n",
    "    nadlan_rehovot.drop(columns = ['helka1','helka2', 'gush_helka'], inplace=True)\n",
    "   \n",
    "   __d.price as integer__\n",
    "   \n",
    "    nadlan_rehovot['price'] = nadlan_rehovot['price'].str.replace(',', '')\n",
    "    nadlan_rehovot.astype(int, copy=False, errors='ignore')\n",
    "    nadlan_rehovot['price'] = nadlan_rehovot['price'].astype(int)\n",
    "    \n",
    "    __e. building date to 'old' or 'new'__\n",
    "    \n",
    "    if date <2000 then the building is 'old'\n",
    "    if date >= 2000 then the building is 'new'\n",
    "    \n",
    "    __f. asset description__\n",
    "    \n",
    "        {'בניני ציבור': 'public building',\n",
    "     'דירה':'appartment',\n",
    "     'דירה בבית קומות':'appartment',\n",
    "     'דירת גג':'roof top appartment',\n",
    "     'דירת גג (פנטהאוז)':'roof top appartment',\n",
    "     'דירת גן':'garden appartment',\n",
    "     'חנות':'shop',\n",
    "     'לא מעובדת':'unknown',\n",
    "     'ללא תיכנון':'unknown',\n",
    "     'מחסנים':'unknown',\n",
    "     'מיני פנטהאוז':'roof top appartment',\n",
    "     'מלאכה':'unknown',\n",
    "     'מסחרי + משרדים':'offices',\n",
    "     'משרד':'offices',\n",
    "     'משרדים + מגורים':'offices',\n",
    "     \"קוטג' דו משפחתי\":'double ground house',\n",
    "     \"קוטג' חד משפחתי\":'single ground house',\n",
    "     \"קוטג' טורי\":'unknown',\n",
    "     'קרקע למגורים':'unknown'}\n",
    "     \n",
    "     __g. Remove extreme value__\n",
    "     \n",
    "     keep only surface area < 300 m2 and price < 4000000\n",
    "     nadlan_rehovot = nadlan_rehovot.loc[nadlan_rehovot['surface area']<300]\n",
    "     nadlan_rehovot = nadlan_rehovot.loc[nadlan_rehovot['price']<4000000]\n",
    "\n",
    "    __h. Surface area to groups__\n",
    "    \n",
    "    'up to 50m2'\n",
    "    'between 50 and 100m2'\n",
    "    'between 100 and 150m2'\n",
    "    'between 150 and 200m2'\n",
    "    'more than 200 m2'\n",
    "    'unknown'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import json\n",
    "import math\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "import time\n",
    "import glob\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# country_deals = pd.DataFrame(columns = ['index', 'DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS', 'GUSH',\n",
    "#        'DEALNATUREDESCRIPTION', 'ASSETROOMNUM', 'FLOORNO', 'DEALNATURE',\n",
    "#        'DEALAMOUNT', 'NEWPROJECTTEXT', 'PROJECTNAME', 'BUILDINGYEAR',\n",
    "#        'YEARBUILT', 'BUILDINGFLOORS', 'KEYVALUE', 'TYPE', 'POLYGON_ID',\n",
    "#        'TREND_IS_NEGATIVE', 'TREND_FORMAT'])\n",
    "# path1 = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\city and real estate deals\\ASHDOD.csv'\n",
    "# path2 = r\"C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\city and real estate deals\\ARI'EL.csv\"\n",
    "# ashdod = pd.read_csv(path1,names=['DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS', 'GUSH',\n",
    "#        'DEALNATUREDESCRIPTION', 'ASSETROOMNUM', 'FLOORNO', 'DEALNATURE',\n",
    "#        'DEALAMOUNT', 'NEWPROJECTTEXT', 'PROJECTNAME', 'BUILDINGYEAR',\n",
    "#        'YEARBUILT', 'BUILDINGFLOORS', 'KEYVALUE', 'TYPE', 'POLYGON_ID',\n",
    "#        'TREND_IS_NEGATIVE', 'TREND_FORMAT'] )\n",
    "# country_deals = pd.concat([country_deals, ashdod], ignore_index=True)\n",
    "# ariel = pd.read_csv(path2,names=['DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS', 'GUSH',\n",
    "#        'DEALNATUREDESCRIPTION', 'ASSETROOMNUM', 'FLOORNO', 'DEALNATURE',\n",
    "#        'DEALAMOUNT', 'NEWPROJECTTEXT', 'PROJECTNAME', 'BUILDINGYEAR',\n",
    "#        'YEARBUILT', 'BUILDINGFLOORS', 'KEYVALUE', 'TYPE', 'POLYGON_ID',\n",
    "#        'TREND_IS_NEGATIVE', 'TREND_FORMAT'] )\n",
    "\n",
    "# country_deals = pd.concat([country_deals, ariel], ignore_index=True)\n",
    "# country_deals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "105\n",
      "106\n",
      "107\n",
      "108\n",
      "109\n",
      "110\n",
      "111\n",
      "112\n",
      "113\n",
      "114\n",
      "115\n",
      "116\n",
      "117\n",
      "118\n",
      "119\n",
      "120\n",
      "121\n",
      "122\n",
      "123\n",
      "124\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "131\n",
      "132\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "139\n",
      "140\n",
      "141\n",
      "142\n",
      "143\n",
      "144\n",
      "145\n",
      "146\n",
      "147\n",
      "148\n",
      "149\n",
      "150\n",
      "151\n",
      "152\n",
      "153\n",
      "154\n",
      "155\n",
      "156\n",
      "157\n",
      "158\n",
      "159\n",
      "160\n",
      "161\n",
      "162\n",
      "163\n",
      "164\n",
      "165\n",
      "166\n",
      "167\n",
      "168\n",
      "169\n",
      "170\n",
      "171\n",
      "172\n",
      "173\n",
      "174\n",
      "175\n",
      "176\n",
      "177\n",
      "178\n",
      "179\n",
      "180\n",
      "181\n",
      "182\n",
      "183\n",
      "184\n",
      "185\n",
      "186\n",
      "187\n",
      "188\n",
      "189\n",
      "190\n",
      "191\n",
      "192\n",
      "193\n",
      "194\n",
      "195\n",
      "196\n",
      "197\n",
      "198\n",
      "199\n",
      "200\n",
      "201\n",
      "202\n",
      "203\n",
      "204\n",
      "205\n",
      "206\n",
      "207\n",
      "208\n",
      "209\n",
      "210\n",
      "211\n",
      "212\n",
      "213\n",
      "214\n",
      "215\n",
      "216\n",
      "217\n",
      "218\n",
      "219\n",
      "220\n",
      "221\n",
      "222\n",
      "223\n",
      "224\n",
      "225\n",
      "226\n",
      "227\n",
      "228\n",
      "229\n",
      "230\n",
      "231\n",
      "232\n",
      "233\n",
      "234\n",
      "235\n",
      "236\n",
      "237\n",
      "238\n",
      "239\n",
      "240\n",
      "241\n",
      "242\n",
      "243\n",
      "244\n",
      "245\n",
      "246\n",
      "247\n",
      "248\n",
      "249\n",
      "250\n",
      "251\n",
      "252\n",
      "253\n",
      "254\n",
      "255\n",
      "256\n",
      "257\n",
      "258\n",
      "259\n",
      "260\n",
      "261\n",
      "262\n",
      "263\n",
      "264\n",
      "265\n",
      "266\n",
      "267\n",
      "268\n",
      "269\n",
      "270\n",
      "271\n",
      "272\n",
      "273\n",
      "274\n",
      "275\n",
      "276\n",
      "277\n",
      "278\n",
      "279\n",
      "280\n",
      "281\n",
      "282\n",
      "283\n",
      "284\n",
      "285\n",
      "286\n",
      "287\n",
      "288\n",
      "289\n",
      "290\n",
      "291\n",
      "292\n",
      "293\n",
      "294\n",
      "295\n",
      "296\n",
      "297\n",
      "298\n",
      "299\n",
      "300\n",
      "301\n",
      "302\n",
      "303\n",
      "304\n",
      "305\n",
      "306\n",
      "307\n",
      "308\n",
      "309\n",
      "310\n",
      "311\n",
      "312\n",
      "313\n",
      "314\n",
      "315\n",
      "316\n",
      "317\n",
      "318\n",
      "319\n",
      "320\n",
      "321\n",
      "322\n",
      "323\n",
      "324\n",
      "325\n",
      "326\n",
      "327\n",
      "328\n",
      "329\n",
      "330\n",
      "331\n",
      "332\n",
      "333\n",
      "334\n",
      "335\n",
      "336\n",
      "337\n",
      "338\n",
      "339\n",
      "340\n",
      "341\n",
      "342\n",
      "343\n",
      "344\n",
      "345\n",
      "346\n",
      "347\n",
      "348\n",
      "349\n",
      "350\n",
      "351\n",
      "352\n",
      "353\n",
      "354\n",
      "355\n",
      "356\n",
      "357\n",
      "358\n",
      "359\n",
      "360\n",
      "361\n",
      "362\n",
      "363\n",
      "364\n",
      "365\n",
      "366\n",
      "367\n",
      "368\n",
      "369\n",
      "370\n",
      "371\n",
      "372\n",
      "373\n",
      "374\n",
      "375\n",
      "376\n",
      "377\n",
      "378\n",
      "379\n",
      "380\n",
      "381\n",
      "382\n",
      "383\n",
      "384\n",
      "385\n",
      "386\n",
      "387\n",
      "388\n",
      "389\n",
      "390\n",
      "391\n",
      "392\n",
      "393\n",
      "394\n",
      "395\n",
      "396\n",
      "397\n",
      "398\n",
      "399\n",
      "400\n",
      "401\n",
      "402\n",
      "403\n",
      "404\n",
      "405\n",
      "406\n",
      "407\n",
      "408\n",
      "409\n",
      "410\n",
      "411\n",
      "412\n",
      "413\n",
      "414\n",
      "415\n",
      "416\n",
      "417\n",
      "418\n",
      "419\n",
      "420\n",
      "421\n",
      "422\n",
      "423\n",
      "424\n",
      "425\n",
      "426\n",
      "427\n",
      "428\n",
      "429\n",
      "430\n",
      "431\n",
      "432\n",
      "433\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-14e994fdc603>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     18\u001b[0m        'TREND_IS_NEGATIVE', 'TREND_FORMAT'])\n\u001b[0;32m     19\u001b[0m \u001b[1;31m#         country_deals.append(name)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 20\u001b[1;33m         \u001b[0mcountry_deals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mcountry_deals\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     21\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     22\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0me\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\concat.py\u001b[0m in \u001b[0;36mconcat\u001b[1;34m(objs, axis, join, ignore_index, keys, levels, names, verify_integrity, sort, copy)\u001b[0m\n\u001b[0;32m    282\u001b[0m         \u001b[0mverify_integrity\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mverify_integrity\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    283\u001b[0m         \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 284\u001b[1;33m         \u001b[0msort\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msort\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    285\u001b[0m     )\n\u001b[0;32m    286\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\reshape\\concat.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, objs, axis, join, keys, levels, names, ignore_index, verify_integrity, copy, sort)\u001b[0m\n\u001b[0;32m    360\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    361\u001b[0m             \u001b[1;31m# consolidate\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 362\u001b[1;33m             \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    363\u001b[0m             \u001b[0mndims\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    364\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_consolidate\u001b[1;34m(self, inplace)\u001b[0m\n\u001b[0;32m   5230\u001b[0m         \u001b[0minplace\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalidate_bool_kwarg\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"inplace\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5231\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5232\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5233\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5234\u001b[0m             \u001b[0mf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mlambda\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   5212\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5213\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5214\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5215\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5216\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mbool_t\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_protect_consolidate\u001b[1;34m(self, f)\u001b[0m\n\u001b[0;32m   5201\u001b[0m         \"\"\"\n\u001b[0;32m   5202\u001b[0m         \u001b[0mblocks_before\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5203\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5204\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mblocks_before\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5205\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_clear_item_cache\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mf\u001b[1;34m()\u001b[0m\n\u001b[0;32m   5210\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5211\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5212\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5213\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5214\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36mconsolidate\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    972\u001b[0m         \u001b[0mbm\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    973\u001b[0m         \u001b[0mbm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 974\u001b[1;33m         \u001b[0mbm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    975\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mbm\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    976\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    980\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    981\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_known_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 982\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_rebuild_blknos_and_blklocs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    983\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    984\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0miget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"SingleBlockManager\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\internals\\managers.py\u001b[0m in \u001b[0;36m_rebuild_blknos_and_blklocs\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    248\u001b[0m             \u001b[0mrl\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mblk\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmgr_locs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    249\u001b[0m             \u001b[0mnew_blknos\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mblkno\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 250\u001b[1;33m             \u001b[0mnew_blklocs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mrl\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrl\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    251\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    252\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mnew_blknos\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "country_deals = pd.DataFrame(columns = ['index', 'DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS', 'GUSH',\n",
    "       'DEALNATUREDESCRIPTION', 'ASSETROOMNUM', 'FLOORNO', 'DEALNATURE',\n",
    "       'DEALAMOUNT', 'NEWPROJECTTEXT', 'PROJECTNAME', 'BUILDINGYEAR',\n",
    "       'YEARBUILT', 'BUILDINGFLOORS', 'KEYVALUE', 'TYPE', 'POLYGON_ID',\n",
    "       'TREND_IS_NEGATIVE', 'TREND_FORMAT'])\n",
    "n = 0\n",
    "for files in glob.glob(r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\city and real estate deals\\*.csv'):\n",
    "    n+=1\n",
    "    print(n)\n",
    "#     print(files)\n",
    "    path = Path(files)\n",
    "    name = path.name.strip('.csv').replace(\" \", \"_\").replace(\"'\", \"\")\n",
    "    try:\n",
    "        name = pd.read_csv(files, names=['DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS', 'GUSH',\n",
    "       'DEALNATUREDESCRIPTION', 'ASSETROOMNUM', 'FLOORNO', 'DEALNATURE',\n",
    "       'DEALAMOUNT', 'NEWPROJECTTEXT', 'PROJECTNAME', 'BUILDINGYEAR',\n",
    "       'YEARBUILT', 'BUILDINGFLOORS', 'KEYVALUE', 'TYPE', 'POLYGON_ID',\n",
    "       'TREND_IS_NEGATIVE', 'TREND_FORMAT'])\n",
    "#         country_deals.append(name)\n",
    "        country_deals = pd.concat([country_deals, name], ignore_index=True)\n",
    "    except Exception as e:\n",
    "        print(e, name)\n",
    "country_deals\n",
    "country_deals.to_pickle(r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\ALLnadlan_data.pkl') \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>DEALDATE</th>\n",
       "      <th>DEALDATETIME</th>\n",
       "      <th>FULLADRESS</th>\n",
       "      <th>DISPLAYADRESS</th>\n",
       "      <th>GUSH</th>\n",
       "      <th>DEALNATUREDESCRIPTION</th>\n",
       "      <th>ASSETROOMNUM</th>\n",
       "      <th>FLOORNO</th>\n",
       "      <th>DEALNATURE</th>\n",
       "      <th>...</th>\n",
       "      <th>NEWPROJECTTEXT</th>\n",
       "      <th>PROJECTNAME</th>\n",
       "      <th>BUILDINGYEAR</th>\n",
       "      <th>YEARBUILT</th>\n",
       "      <th>BUILDINGFLOORS</th>\n",
       "      <th>KEYVALUE</th>\n",
       "      <th>TYPE</th>\n",
       "      <th>POLYGON_ID</th>\n",
       "      <th>TREND_IS_NEGATIVE</th>\n",
       "      <th>TREND_FORMAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19.07.2019</td>\n",
       "      <td>2019-07-19T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19688-70-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1877</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4768984960</td>\n",
       "      <td>2</td>\n",
       "      <td>19688-70</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20.03.2018</td>\n",
       "      <td>2018-03-20T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19688-53-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4723245600</td>\n",
       "      <td>2</td>\n",
       "      <td>19688-53</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>06.12.2016</td>\n",
       "      <td>2016-12-06T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19688-41-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>1.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>45</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2003</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4680955800</td>\n",
       "      <td>2</td>\n",
       "      <td>19688-41</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>01.09.2015</td>\n",
       "      <td>2015-09-01T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19688-73-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>75</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4609900480</td>\n",
       "      <td>2</td>\n",
       "      <td>19688-73</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18.07.2010</td>\n",
       "      <td>2010-07-18T00:00:00</td>\n",
       "      <td>, אבירים</td>\n",
       "      <td></td>\n",
       "      <td>19688-77-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>307</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1986</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4407230360</td>\n",
       "      <td>1</td>\n",
       "      <td>19688-77</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238235</th>\n",
       "      <td>NaN</td>\n",
       "      <td>08.06.2010</td>\n",
       "      <td>2010-06-08T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19255-39-1</td>\n",
       "      <td>קוטג' חד משפחתי</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4405179000</td>\n",
       "      <td>2</td>\n",
       "      <td>19255-39</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238236</th>\n",
       "      <td>NaN</td>\n",
       "      <td>30.01.2008</td>\n",
       "      <td>2008-01-30T00:00:00</td>\n",
       "      <td>, צביה</td>\n",
       "      <td></td>\n",
       "      <td>19255-49-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>4.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>127</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4322916760</td>\n",
       "      <td>1</td>\n",
       "      <td>19255-49</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238237</th>\n",
       "      <td>NaN</td>\n",
       "      <td>11.01.2008</td>\n",
       "      <td>2008-01-11T00:00:00</td>\n",
       "      <td>, צביה</td>\n",
       "      <td></td>\n",
       "      <td>19255-73-1</td>\n",
       "      <td>בית בודד</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>76</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4320798040</td>\n",
       "      <td>1</td>\n",
       "      <td>19255-73</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238238</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20.12.2007</td>\n",
       "      <td>2007-12-20T00:00:00</td>\n",
       "      <td>, צביה</td>\n",
       "      <td></td>\n",
       "      <td>19255-79-1</td>\n",
       "      <td>בית בודד</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4320376320</td>\n",
       "      <td>1</td>\n",
       "      <td>19255-79</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238239</th>\n",
       "      <td>NaN</td>\n",
       "      <td>06.10.1998</td>\n",
       "      <td>1998-10-06T00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19255-63-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3928089800</td>\n",
       "      <td>2</td>\n",
       "      <td>19255-63</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>238240 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index    DEALDATE         DEALDATETIME FULLADRESS DISPLAYADRESS  \\\n",
       "0        NaN  19.07.2019  2019-07-19T00:00:00        NaN           NaN   \n",
       "1        NaN  20.03.2018  2018-03-20T00:00:00        NaN           NaN   \n",
       "2        NaN  06.12.2016  2016-12-06T00:00:00        NaN           NaN   \n",
       "3        NaN  01.09.2015  2015-09-01T00:00:00        NaN           NaN   \n",
       "4        NaN  18.07.2010  2010-07-18T00:00:00   , אבירים                 \n",
       "...      ...         ...                  ...        ...           ...   \n",
       "238235   NaN  08.06.2010  2010-06-08T00:00:00        NaN           NaN   \n",
       "238236   NaN  30.01.2008  2008-01-30T00:00:00     , צביה                 \n",
       "238237   NaN  11.01.2008  2008-01-11T00:00:00     , צביה                 \n",
       "238238   NaN  20.12.2007  2007-12-20T00:00:00     , צביה                 \n",
       "238239   NaN  06.10.1998  1998-10-06T00:00:00        NaN           NaN   \n",
       "\n",
       "              GUSH DEALNATUREDESCRIPTION  ASSETROOMNUM FLOORNO DEALNATURE  \\\n",
       "0       19688-70-1               מלונאות           NaN     NaN       1877   \n",
       "1       19688-53-1               מלונאות           NaN  ראשונה         70   \n",
       "2       19688-41-1       דירה בבית קומות           1.0  ראשונה         45   \n",
       "3       19688-73-1               מלונאות           NaN  ראשונה         75   \n",
       "4       19688-77-1               מלונאות           NaN     NaN        307   \n",
       "...            ...                   ...           ...     ...        ...   \n",
       "238235  19255-39-1       קוטג' חד משפחתי           6.0     NaN        130   \n",
       "238236  19255-49-1       דירה בבית קומות           4.0  ראשונה        127   \n",
       "238237  19255-73-1              בית בודד           4.0     NaN         76   \n",
       "238238  19255-79-1              בית בודד           4.0     NaN        105   \n",
       "238239  19255-63-1       דירה בבית קומות           6.0     NaN        120   \n",
       "\n",
       "        ... NEWPROJECTTEXT  PROJECTNAME BUILDINGYEAR YEARBUILT  \\\n",
       "0       ...            NaN          NaN         1980       NaN   \n",
       "1       ...            NaN          NaN         2001       NaN   \n",
       "2       ...            NaN          NaN         2003       NaN   \n",
       "3       ...            NaN          NaN         2002       NaN   \n",
       "4       ...            NaN          NaN         1986       NaN   \n",
       "...     ...            ...          ...          ...       ...   \n",
       "238235  ...            NaN          NaN         1998       NaN   \n",
       "238236  ...            NaN          NaN         1998       NaN   \n",
       "238237  ...            NaN          NaN         1992       NaN   \n",
       "238238  ...            NaN          NaN         1997       NaN   \n",
       "238239  ...            NaN          NaN         1992       NaN   \n",
       "\n",
       "        BUILDINGFLOORS    KEYVALUE TYPE POLYGON_ID TREND_IS_NEGATIVE  \\\n",
       "0                  NaN  4768984960    2   19688-70             False   \n",
       "1                  NaN  4723245600    2   19688-53             False   \n",
       "2                  NaN  4680955800    2   19688-41             False   \n",
       "3                  NaN  4609900480    2   19688-73             False   \n",
       "4                  NaN  4407230360    1   19688-77             False   \n",
       "...                ...         ...  ...        ...               ...   \n",
       "238235             NaN  4405179000    2   19255-39             False   \n",
       "238236             NaN  4322916760    1   19255-49             False   \n",
       "238237             NaN  4320798040    1   19255-73             False   \n",
       "238238             NaN  4320376320    1   19255-79             False   \n",
       "238239             NaN  3928089800    2   19255-63             False   \n",
       "\n",
       "       TREND_FORMAT  \n",
       "0               NaN  \n",
       "1               NaN  \n",
       "2               NaN  \n",
       "3               NaN  \n",
       "4               NaN  \n",
       "...             ...  \n",
       "238235          NaN  \n",
       "238236          NaN  \n",
       "238237          NaN  \n",
       "238238          NaN  \n",
       "238239          NaN  \n",
       "\n",
       "[238240 rows x 21 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals = pd.read_pickle(r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\ALLnadlan_data.pkl')\n",
    "country_deals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Retrieve the year the house was bought"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(236819, 21)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals.drop_duplicates(ignore_index=True, inplace=True)\n",
    "country_deals.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 236819 entries, 0 to 236818\n",
      "Data columns (total 24 columns):\n",
      " #   Column                 Non-Null Count   Dtype  \n",
      "---  ------                 --------------   -----  \n",
      " 0   index                  0 non-null       object \n",
      " 1   DEALDATE               236819 non-null  object \n",
      " 2   DEALDATETIME           236819 non-null  object \n",
      " 3   FULLADRESS             163935 non-null  object \n",
      " 4   DISPLAYADRESS          163935 non-null  object \n",
      " 5   GUSH                   236819 non-null  object \n",
      " 6   DEALNATUREDESCRIPTION  236472 non-null  object \n",
      " 7   ASSETROOMNUM           219517 non-null  float64\n",
      " 8   FLOORNO                184158 non-null  object \n",
      " 9   DEALNATURE             233774 non-null  object \n",
      " 10  DEALAMOUNT             236819 non-null  object \n",
      " 11  NEWPROJECTTEXT         43801 non-null   float64\n",
      " 12  PROJECTNAME            35899 non-null   object \n",
      " 13  BUILDINGYEAR           214871 non-null  object \n",
      " 14  YEARBUILT              3411 non-null    float64\n",
      " 15  BUILDINGFLOORS         137915 non-null  float64\n",
      " 16  KEYVALUE               236819 non-null  object \n",
      " 17  TYPE                   236819 non-null  object \n",
      " 18  POLYGON_ID             236819 non-null  object \n",
      " 19  TREND_IS_NEGATIVE      236819 non-null  object \n",
      " 20  TREND_FORMAT           58923 non-null   object \n",
      " 21  day                    236819 non-null  object \n",
      " 22  month                  236819 non-null  object \n",
      " 23  deal_year              236819 non-null  int32  \n",
      "dtypes: float64(4), int32(1), object(19)\n",
      "memory usage: 42.5+ MB\n"
     ]
    }
   ],
   "source": [
    "country_deals[['day', 'month', 'deal_year']] = country_deals['DEALDATE'].str.split('.', expand=True)\n",
    "country_deals['deal_year'] = country_deals['deal_year'].astype(int)\n",
    "country_deals.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a-b. drop and rename columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# country_deals = pd.read_csv(r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\RealEstateData\\test5.csv')\n",
    "country_deals.drop(columns = ['index', 'DEALDATE', 'DEALDATETIME', 'FULLADRESS', 'DISPLAYADRESS','NEWPROJECTTEXT', 'PROJECTNAME','YEARBUILT','KEYVALUE', 'TYPE',\n",
    "       'POLYGON_ID', 'TREND_IS_NEGATIVE', 'TREND_FORMAT', 'day', 'month'], inplace=True)\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gush_helka</th>\n",
       "      <th>description</th>\n",
       "      <th>room number</th>\n",
       "      <th>floor</th>\n",
       "      <th>surface area</th>\n",
       "      <th>price</th>\n",
       "      <th>building year</th>\n",
       "      <th>total floor in building</th>\n",
       "      <th>deal_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19688-70-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1877</td>\n",
       "      <td>2,000,000</td>\n",
       "      <td>1980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19688-53-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>70</td>\n",
       "      <td>1,685,000</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19688-41-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>1.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>45</td>\n",
       "      <td>4,130,000</td>\n",
       "      <td>2003</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19688-73-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>75</td>\n",
       "      <td>1,629,000</td>\n",
       "      <td>2002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19688-77-1</td>\n",
       "      <td>מלונאות</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>307</td>\n",
       "      <td>1,600,000</td>\n",
       "      <td>1986</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236814</th>\n",
       "      <td>19255-39-1</td>\n",
       "      <td>קוטג' חד משפחתי</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130</td>\n",
       "      <td>725,000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236815</th>\n",
       "      <td>19255-49-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>4.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>127</td>\n",
       "      <td>635,000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236816</th>\n",
       "      <td>19255-73-1</td>\n",
       "      <td>בית בודד</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>76</td>\n",
       "      <td>520,000</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236817</th>\n",
       "      <td>19255-79-1</td>\n",
       "      <td>בית בודד</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105</td>\n",
       "      <td>473,000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236818</th>\n",
       "      <td>19255-63-1</td>\n",
       "      <td>דירה בבית קומות</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120</td>\n",
       "      <td>511,000</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>236819 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        gush_helka      description  room number   floor surface area  \\\n",
       "0       19688-70-1          מלונאות          NaN     NaN         1877   \n",
       "1       19688-53-1          מלונאות          NaN  ראשונה           70   \n",
       "2       19688-41-1  דירה בבית קומות          1.0  ראשונה           45   \n",
       "3       19688-73-1          מלונאות          NaN  ראשונה           75   \n",
       "4       19688-77-1          מלונאות          NaN     NaN          307   \n",
       "...            ...              ...          ...     ...          ...   \n",
       "236814  19255-39-1  קוטג' חד משפחתי          6.0     NaN          130   \n",
       "236815  19255-49-1  דירה בבית קומות          4.0  ראשונה          127   \n",
       "236816  19255-73-1         בית בודד          4.0     NaN           76   \n",
       "236817  19255-79-1         בית בודד          4.0     NaN          105   \n",
       "236818  19255-63-1  דירה בבית קומות          6.0     NaN          120   \n",
       "\n",
       "            price building year  total floor in building  deal_year  \n",
       "0       2,000,000          1980                      NaN       2019  \n",
       "1       1,685,000          2001                      NaN       2018  \n",
       "2       4,130,000          2003                      NaN       2016  \n",
       "3       1,629,000          2002                      NaN       2015  \n",
       "4       1,600,000          1986                      NaN       2010  \n",
       "...           ...           ...                      ...        ...  \n",
       "236814    725,000          1998                      NaN       2010  \n",
       "236815    635,000          1998                      NaN       2008  \n",
       "236816    520,000          1992                      NaN       2008  \n",
       "236817    473,000          1997                      NaN       2007  \n",
       "236818    511,000          1992                      NaN       1998  \n",
       "\n",
       "[236819 rows x 9 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals.columns = ['gush_helka', 'description', 'room number', 'floor',\n",
    "       'surface area', 'price', 'building year', 'total floor in building', 'deal_year']\n",
    "\n",
    "country_deals       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 236819 entries, 0 to 236818\n",
      "Data columns (total 9 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   gush_helka               236819 non-null  object \n",
      " 1   description              236472 non-null  object \n",
      " 2   room number              219517 non-null  float64\n",
      " 3   floor                    184158 non-null  object \n",
      " 4   surface area             233774 non-null  object \n",
      " 5   price                    236819 non-null  object \n",
      " 6   building year            214871 non-null  object \n",
      " 7   total floor in building  137915 non-null  float64\n",
      " 8   deal_year                236819 non-null  int32  \n",
      "dtypes: float64(2), int32(1), object(6)\n",
      "memory usage: 15.4+ MB\n"
     ]
    }
   ],
   "source": [
    "country_deals.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c-d. get gush number and set price as integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 236819 entries, 0 to 236818\n",
      "Data columns (total 9 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   description              236472 non-null  object \n",
      " 1   room number              219517 non-null  float64\n",
      " 2   floor                    184158 non-null  object \n",
      " 3   surface area             233774 non-null  object \n",
      " 4   price                    236819 non-null  int32  \n",
      " 5   building year            214871 non-null  object \n",
      " 6   total floor in building  137915 non-null  float64\n",
      " 7   deal_year                236819 non-null  int32  \n",
      " 8   gush_number              236819 non-null  int32  \n",
      "dtypes: float64(2), int32(3), object(4)\n",
      "memory usage: 13.6+ MB\n"
     ]
    }
   ],
   "source": [
    "country_deals[['gush_number', 'helka1','helka2']] = country_deals['gush_helka'].str.split('-', expand=True)\n",
    "country_deals_cop1 = country_deals.drop(columns = ['helka1','helka2', 'gush_helka'])\n",
    "country_deals_cop1['price'] = country_deals_cop1['price'].str.replace(',', '')\n",
    "country_deals_cop1['price'] = country_deals_cop1['price'].astype(int)\n",
    "country_deals_cop1['gush_number'] = country_deals_cop1['gush_number'].astype(int)\n",
    "country_deals_cop1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "e. creating new feature: old or new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_deals_cop1.set_index('building year', inplace=True)\n",
    "buildind_state = []\n",
    "for row, value in country_deals_cop1.iterrows():\n",
    "    if row <= 2000:\n",
    "        buildind_state.append('old')\n",
    "    elif row > 2000:\n",
    "        buildind_state.append('new')\n",
    "    else:\n",
    "        buildind_state.append('unknown')\n",
    "country_deals_cop1.reset_index(inplace=True)\n",
    "country_deals_cop1['building state'] = buildind_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f. building description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['tourism', 'appartment', 'unknown', 'land', 'double ground house',\n",
       "       'Commercial', 'single ground house', 'offices', 'public building',\n",
       "       nan, 'garden appartment', 'roof top appartment', 'duplex',\n",
       "       'old people aptm', 'agricultural land', 'underground appartment'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals_cop2 = country_deals_cop1.copy()\n",
    "country_deals_cop2['description'] = country_deals_cop2['description'].replace(\n",
    "{'בניני ציבור': 'public building',\n",
    " 'דירה':'appartment',\n",
    " 'דירה בבית קומות':'appartment',\n",
    " 'דירת גג':'roof top appartment',\n",
    " 'דירת גג (פנטהאוז)':'roof top appartment',\n",
    " 'דירת גן':'garden appartment',\n",
    " 'חנות':'Commercial',\n",
    " 'לא מעובדת':'unknown',\n",
    " 'ללא תיכנון':'unknown',\n",
    " 'מחסנים':'unknown',\n",
    " 'מיני פנטהאוז':'roof top appartment',\n",
    " 'מלאכה':'unknown',\n",
    " 'מסחרי + משרדים':'offices',\n",
    " 'משרד':'offices',\n",
    " 'משרדים + מגורים':'offices',\n",
    " \"קוטג' דו משפחתי\":'double ground house',\n",
    " \"קוטג' חד משפחתי\":'single ground house',\n",
    " \"קוטג' טורי\":'unknown',\n",
    " 'קרקע למגורים':'land',\n",
    "'מלונאות':'tourism',\n",
    "'בית בודד':'single ground house',\n",
    "'חד משפחתי (וילה)':'single ground house',\n",
    "'מסחרי + מגורים':'Commercial',\n",
    "'דופלקס':'duplex',\n",
    "'עסק':'Commercial',\n",
    "'קומבינציה':'unknown',\n",
    "'דיור מוגן': 'old people aptm',\n",
    "'מבנים חקלאיים': 'agricultural land',\n",
    "'דירת נופש': 'tourism',\n",
    "'קבוצת רכישה - קרקע מגורים': 'land',\n",
    "'במשק חקלאי-נחלה':'agricultural land',\n",
    "'אופציה': 'unknown', \n",
    " 'מלונאות ונופש':'tourism',\n",
    "'בית אבות': 'old people aptm',\n",
    "'לופט':'appartment',\n",
    "'דירת מרתף': 'underground appartment',\n",
    " 'מגורים': 'appartment',\n",
    " 'שלחין': 'unknown',\n",
    " 'קבוצת רכישה - קרקע מסחרי': 'land',\n",
    " 'תחנת דלק':'Commercial',\n",
    " 'חלוקה/יחוד דירות': 'appartment',\n",
    " 'תעשיה':'Commercial',\n",
    " 'חניה':'unknown',\n",
    " 'אחר':'unknown'\n",
    " \n",
    "})\n",
    "\n",
    "    \n",
    "country_deals_cop2['description'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(218147, 10)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals_cop3 = country_deals_cop2.set_index('description')\n",
    "country_deals_cop3 = country_deals_cop3.loc[['appartment','roof top appartment', 'garden appartment', 'double ground house', 'single ground house']]\n",
    "country_deals_cop3.reset_index(inplace=True)\n",
    "country_deals_cop3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 218147 entries, 0 to 218146\n",
      "Data columns (total 10 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   description              218147 non-null  object \n",
      " 1   building year            202655 non-null  float64\n",
      " 2   room number              217499 non-null  float64\n",
      " 3   floor                    174997 non-null  object \n",
      " 4   surface area             217443 non-null  object \n",
      " 5   price                    218147 non-null  int32  \n",
      " 6   total floor in building  131433 non-null  float64\n",
      " 7   deal_year                218147 non-null  int32  \n",
      " 8   gush_number              218147 non-null  int32  \n",
      " 9   building state           218147 non-null  object \n",
      "dtypes: float64(3), int32(3), object(4)\n",
      "memory usage: 14.1+ MB\n"
     ]
    }
   ],
   "source": [
    "country_deals_cop3.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(country_deals_cop3.isnull(),yticklabels=False,cbar=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take care of the nan values. either remove them or replace them accordingly.\n",
    "\n",
    "1. building year\n",
    "15007 values are missing\n",
    "2. room number\n",
    "91 values are missing\n",
    "3. surface area\n",
    "635 values are missing\n",
    "4. floor and total flor in the buiding\n",
    "too many values are missing from these features, better remove them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total floor in building</th>\n",
       "      <th>building year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>building state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>new</th>\n",
       "      <td>7.0</td>\n",
       "      <td>2017.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>old</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1970.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unknown</th>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                total floor in building  building year\n",
       "building state                                        \n",
       "new                                 7.0         2017.0\n",
       "old                                 4.0         1970.0\n",
       "unknown                             2.0            NaN"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x= 'building state', y ='total floor in building', data=country_deals_cop3 )\n",
    "country_deals_cop3.groupby(['building state']).median()[['total floor in building', 'building year']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Replace missing values of [building year] \n",
    "\n",
    "whenever I have information on the total number of floor in the building.\n",
    "\n",
    "- For older building (mean = 1974), the median total floor is 4.\n",
    "- For newer building (mean = 2015), the median total floor is 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "for row, column in country_deals_cop3.iterrows():\n",
    "    if np.isnan(country_deals_cop3.loc[row, 'building year']) and country_deals_cop3.loc[row,'total floor in building'] <= 4:\n",
    "        country_deals.loc[row, 'building year'] = 1974\n",
    "    elif np.isnan(country_deals_cop3.loc[row, 'building year']) and country_deals_cop3.loc[row,'total floor in building'] > 4:\n",
    "        country_deals_cop3.loc[row, 'building year'] = 2015     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "country_deals_cop3.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "replacing missing values in surface area and room number that tends to be corelated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>surface area</th>\n",
       "      <th>description</th>\n",
       "      <th>building year</th>\n",
       "      <th>room number</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>total floor in building</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "      <th>building state</th>\n",
       "      <th>area bins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>4130000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016</td>\n",
       "      <td>19688</td>\n",
       "      <td>new</td>\n",
       "      <td>A &lt; 50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>82.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>1690000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>115.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>קרקע</td>\n",
       "      <td>1985000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>110.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3333000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2018</td>\n",
       "      <td>29524</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>שניה</td>\n",
       "      <td>1480000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218142</th>\n",
       "      <td>100.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>ראשונה</td>\n",
       "      <td>900000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218143</th>\n",
       "      <td>127.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>752000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218144</th>\n",
       "      <td>130.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>725000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2010</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218145</th>\n",
       "      <td>76.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>1992.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>520000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218146</th>\n",
       "      <td>105.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>473000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2007</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>218147 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        surface area          description  building year  room number   floor  \\\n",
       "0               45.0           appartment         2003.0          1.0  ראשונה   \n",
       "1               82.1           appartment         1970.0          3.0  ראשונה   \n",
       "2              115.0           appartment         1970.0          4.0    קרקע   \n",
       "3              110.0           appartment         1970.0          3.0     NaN   \n",
       "4               76.1           appartment         1970.0          3.0    שניה   \n",
       "...              ...                  ...            ...          ...     ...   \n",
       "218142         100.0  single ground house         1987.0          4.0  ראשונה   \n",
       "218143         127.0  single ground house         1992.0          5.0     NaN   \n",
       "218144         130.0  single ground house         1998.0          6.0     NaN   \n",
       "218145          76.0  single ground house         1992.0          4.0     NaN   \n",
       "218146         105.0  single ground house         1997.0          4.0     NaN   \n",
       "\n",
       "          price  total floor in building  deal_year  gush_number  \\\n",
       "0       4130000                      NaN       2016        19688   \n",
       "1       1690000                      2.0       2019        29536   \n",
       "2       1985000                      2.0       2019        29536   \n",
       "3       3333000                      NaN       2018        29524   \n",
       "4       1480000                      2.0       2018        29536   \n",
       "...         ...                      ...        ...          ...   \n",
       "218142   900000                      NaN       2015        19255   \n",
       "218143   752000                      NaN       2015        19255   \n",
       "218144   725000                      NaN       2010        19255   \n",
       "218145   520000                      NaN       2008        19255   \n",
       "218146   473000                      NaN       2007        19255   \n",
       "\n",
       "       building state      area bins  \n",
       "0                 new         A < 50  \n",
       "1                 old   50 < A < 100  \n",
       "2                 old  100 < A < 150  \n",
       "3                 old  100 < A < 150  \n",
       "4                 old   50 < A < 100  \n",
       "...               ...            ...  \n",
       "218142            old  100 < A < 150  \n",
       "218143            old  100 < A < 150  \n",
       "218144            old  100 < A < 150  \n",
       "218145            old   50 < A < 100  \n",
       "218146            old  100 < A < 150  \n",
       "\n",
       "[218147 rows x 11 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_deals_cop4 = country_deals_cop3.copy()\n",
    "country_deals_cop4.set_index('surface area', inplace=True)\n",
    "area = []\n",
    "for row, value in country_deals_cop4.iterrows():\n",
    "    if 0< row < 50:\n",
    "        area.append('A < 50')\n",
    "    elif 49< row < 100:\n",
    "        area.append('50 < A < 100')\n",
    "    elif 99< row < 150:\n",
    "        area.append('100 < A < 150')  \n",
    "    elif 149 < row < 200:\n",
    "        area.append('150 < A < 200')\n",
    "    elif row > 199:\n",
    "        area.append('A > 200')\n",
    "    else:\n",
    "        area.append('unknown')\n",
    "\n",
    "country_deals_cop4.reset_index(inplace=True)\n",
    "country_deals_cop4['area bins'] = area\n",
    "\n",
    "country_deals_cop4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>room number</th>\n",
       "      <th>surface area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area bins</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100 &lt; A &lt; 150</th>\n",
       "      <td>5.0</td>\n",
       "      <td>118.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150 &lt; A &lt; 200</th>\n",
       "      <td>6.0</td>\n",
       "      <td>165.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50 &lt; A &lt; 100</th>\n",
       "      <td>3.0</td>\n",
       "      <td>75.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A &lt; 50</th>\n",
       "      <td>2.0</td>\n",
       "      <td>42.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A &gt; 200</th>\n",
       "      <td>6.0</td>\n",
       "      <td>242.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unknown</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               room number  surface area\n",
       "area bins                               \n",
       "100 < A < 150          5.0        118.40\n",
       "150 < A < 200          6.0        165.00\n",
       "50 < A < 100           3.0         75.67\n",
       "A < 50                 2.0         42.79\n",
       "A > 200                6.0        242.00\n",
       "unknown                1.0           NaN"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x= 'area bins', y='room number', data=country_deals_cop4)\n",
    "country_deals_cop4.groupby(['area bins']).median()[['room number', 'surface area']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "country_deals_cop5 = country_deals_cop4.copy()\n",
    "\n",
    "for row, column in country_deals_cop5.iterrows():\n",
    "    if np.isnan(country_deals_cop5.loc[row, 'surface area']):\n",
    "        if 0 < country_deals_cop5.loc[row,'room number'] <= 2:\n",
    "            country_deals_cop5.loc[row, 'surface area'] = 42\n",
    "        elif 2 < country_deals_cop5.loc[row,'room number'] < 4:\n",
    "            country_deals_cop5.loc[row, 'surface area'] = 75\n",
    "        elif 4 <= country_deals_cop5.loc[row,'room number'] <= 5:\n",
    "            country_deals_cop5.loc[row, 'surface area'] = 118 \n",
    "        elif country_deals_cop5.loc[row,'room number'] > 5:\n",
    "            country_deals_cop5.loc[row, 'surface area'] = 165    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "country_deals_cop6 = country_deals_cop5.copy()\n",
    "\n",
    "for row, column in country_deals_cop5.iterrows():\n",
    "    if np.isnan(country_deals_cop6.loc[row, 'room number']):\n",
    "        if country_deals_cop6.loc[row,'area bins'] == 'A < 50':\n",
    "            country_deals_cop6.loc[row, 'room number'] = 2\n",
    "        elif country_deals_cop6.loc[row,'area bins'] == '50 < A < 100':\n",
    "            country_deals_cop6.loc[row, 'room number'] = 3\n",
    "        elif country_deals_cop6.loc[row,'area bins'] == '100 < A < 150':\n",
    "            country_deals_cop6.loc[row, 'room number'] = 5\n",
    "        elif country_deals_cop6.loc[row,'area bins'] == '150 < A < 200':\n",
    "            country_deals_cop6.loc[row, 'room number'] = 6\n",
    "        elif country_deals_cop6.loc[row,'area bins'] == 'A > 200':\n",
    "            country_deals_cop6.loc[row, 'room number'] = 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 218147 entries, 0 to 218146\n",
      "Data columns (total 11 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   surface area             218073 non-null  float64\n",
      " 1   description              218147 non-null  object \n",
      " 2   building year            202713 non-null  float64\n",
      " 3   room number              218073 non-null  float64\n",
      " 4   floor                    174997 non-null  object \n",
      " 5   price                    218147 non-null  int32  \n",
      " 6   total floor in building  131433 non-null  float64\n",
      " 7   deal_year                218147 non-null  int32  \n",
      " 8   gush_number              218147 non-null  int32  \n",
      " 9   building state           218147 non-null  object \n",
      " 10  area bins                218147 non-null  object \n",
      "dtypes: float64(4), int32(3), object(4)\n",
      "memory usage: 15.8+ MB\n"
     ]
    }
   ],
   "source": [
    "country_deals_cop6.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most of the data is from 2017 and later. Hence I will use only the data from 2017 to 2020."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 207605 entries, 1 to 218141\n",
      "Data columns (total 11 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   surface area             207534 non-null  float64\n",
      " 1   description              207605 non-null  object \n",
      " 2   building year            192289 non-null  float64\n",
      " 3   room number              207534 non-null  float64\n",
      " 4   floor                    169480 non-null  object \n",
      " 5   price                    207605 non-null  int32  \n",
      " 6   total floor in building  129369 non-null  float64\n",
      " 7   deal_year                207605 non-null  int32  \n",
      " 8   gush_number              207605 non-null  int32  \n",
      " 9   building state           207605 non-null  object \n",
      " 10  area bins                207605 non-null  object \n",
      "dtypes: float64(4), int32(3), object(4)\n",
      "memory usage: 16.6+ MB\n"
     ]
    }
   ],
   "source": [
    "recent_deals = country_deals_cop6.loc[country_deals_cop6['deal_year']>2016]\n",
    "recent_deals.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two options to deal with missing values in the building year and surface area column.\n",
    "1. To replace them by the median year (1997)\n",
    "2. To remove them\n",
    "\n",
    "For now, I will remove them as I think that this column has a significant impact on the price of the aset. I don't want to introduce too many incertainties in the model.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>surface area</th>\n",
       "      <th>building year</th>\n",
       "      <th>room number</th>\n",
       "      <th>price</th>\n",
       "      <th>total floor in building</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>207534.000000</td>\n",
       "      <td>192289.000000</td>\n",
       "      <td>207534.000000</td>\n",
       "      <td>2.076050e+05</td>\n",
       "      <td>129369.000000</td>\n",
       "      <td>207605.000000</td>\n",
       "      <td>207605.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>103.311220</td>\n",
       "      <td>1991.813390</td>\n",
       "      <td>3.966979</td>\n",
       "      <td>1.753416e+06</td>\n",
       "      <td>5.772341</td>\n",
       "      <td>2018.794639</td>\n",
       "      <td>14362.575588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>156.561584</td>\n",
       "      <td>46.434313</td>\n",
       "      <td>1.138789</td>\n",
       "      <td>2.764037e+06</td>\n",
       "      <td>5.384781</td>\n",
       "      <td>0.791343</td>\n",
       "      <td>19201.253413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>20.020000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>187.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>69.700000</td>\n",
       "      <td>1970.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.033000e+06</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2018.000000</td>\n",
       "      <td>6145.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>96.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.485000e+06</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>7594.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>121.300000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.098000e+06</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>16662.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>34153.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>3.800000e+08</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>2048.000000</td>\n",
       "      <td>400505.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        surface area  building year    room number         price  \\\n",
       "count  207534.000000  192289.000000  207534.000000  2.076050e+05   \n",
       "mean      103.311220    1991.813390       3.966979  1.753416e+06   \n",
       "std       156.561584      46.434313       1.138789  2.764037e+06   \n",
       "min        20.020000       0.000000       1.000000  5.000000e+04   \n",
       "25%        69.700000    1970.000000       3.000000  1.033000e+06   \n",
       "50%        96.000000    1997.000000       4.000000  1.485000e+06   \n",
       "75%       121.300000    2017.000000       5.000000  2.098000e+06   \n",
       "max     34153.000000    2023.000000      19.000000  3.800000e+08   \n",
       "\n",
       "       total floor in building      deal_year    gush_number  \n",
       "count            129369.000000  207605.000000  207605.000000  \n",
       "mean                  5.772341    2018.794639   14362.575588  \n",
       "std                   5.384781       0.791343   19201.253413  \n",
       "min                   1.000000    2017.000000     187.000000  \n",
       "25%                   3.000000    2018.000000    6145.000000  \n",
       "50%                   4.000000    2019.000000    7594.000000  \n",
       "75%                   7.000000    2019.000000   16662.000000  \n",
       "max                  42.000000    2048.000000  400505.000000  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recent_deals.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 192275 entries, 1 to 218141\n",
      "Data columns (total 11 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   surface area             192275 non-null  float64\n",
      " 1   description              192275 non-null  object \n",
      " 2   building year            192275 non-null  float64\n",
      " 3   room number              192275 non-null  float64\n",
      " 4   floor                    167748 non-null  object \n",
      " 5   price                    192275 non-null  int32  \n",
      " 6   total floor in building  129239 non-null  float64\n",
      " 7   deal_year                192275 non-null  int32  \n",
      " 8   gush_number              192275 non-null  int32  \n",
      " 9   building state           192275 non-null  object \n",
      " 10  area bins                192275 non-null  object \n",
      "dtypes: float64(4), int32(3), object(4)\n",
      "memory usage: 15.4+ MB\n"
     ]
    }
   ],
   "source": [
    "recent_deal_copy1 = recent_deals.copy()\n",
    "recent_deal_copy1.dropna(axis = 0, subset = ['building year', 'surface area'], inplace=True)\n",
    "recent_deal_copy1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 192275 entries, 1 to 218141\n",
      "Data columns (total 9 columns):\n",
      " #   Column          Non-Null Count   Dtype  \n",
      "---  ------          --------------   -----  \n",
      " 0   surface area    192275 non-null  float64\n",
      " 1   description     192275 non-null  object \n",
      " 2   building year   192275 non-null  float64\n",
      " 3   room number     192275 non-null  float64\n",
      " 4   price           192275 non-null  int32  \n",
      " 5   deal_year       192275 non-null  int32  \n",
      " 6   gush_number     192275 non-null  int32  \n",
      " 7   building state  192275 non-null  object \n",
      " 8   area bins       192275 non-null  object \n",
      "dtypes: float64(3), int32(3), object(3)\n",
      "memory usage: 12.5+ MB\n"
     ]
    }
   ],
   "source": [
    "recent_deal_copy2 = recent_deal_copy1.drop(columns = ['total floor in building', 'floor'])\n",
    "recent_deal_copy2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='price', ylabel='Density'>"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,2, figsize=(12,5))\n",
    "sns.distplot(recent_deal_copy3['price'], ax=axes[0])\n",
    "sns.distplot(np.log1p(recent_deal_copy3['price']), ax=axes[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='surface area', ylabel='Density'>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,2, figsize=(12,5))\n",
    "sns.distplot(recent_deal_copy3['surface area'], ax=axes[0])\n",
    "sns.distplot(np.log1p(recent_deal_copy3['surface area']), ax=axes[1])\n",
    "# country_deals['log_surface area'] = np.log1p(country_deals['surface area'])\n",
    "# sns.distplot(country_deals['log_surface area'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Completing the unknown value of the building state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "recent_deal_copy4 = recent_deal_copy3.copy()\n",
    "recent_deal_copy4.set_index('building year', inplace=True)\n",
    "buildind_state = []\n",
    "for row, value in recent_deal_copy4.iterrows():\n",
    "    if row <= 2000:\n",
    "        buildind_state.append('old')\n",
    "    elif row > 2000:\n",
    "        buildind_state.append('new')\n",
    "    else:\n",
    "        buildind_state.append('unknown')\n",
    "recent_deal_copy4.reset_index(inplace=True)\n",
    "recent_deal_copy4['building state'] = buildind_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n",
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='building state', ylabel='count'>"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,2, figsize=(12,5))\n",
    "sns.countplot('building state',  data=recent_deal_copy3, ax=axes[0])\n",
    "sns.countplot('building state',  data=recent_deal_copy4, ax=axes[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\majac\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.0, 20000000.0)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 436.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot( 'surface area', 'price',data=recent_deal_copy4, scatter_kws={\"s\": 1}, hue = 'building state', fit_reg=True, palette=\"husl\")\n",
    "plt.xlim(0, 500)\n",
    "plt.ylim(0, 20000000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building year</th>\n",
       "      <th>surface area</th>\n",
       "      <th>description</th>\n",
       "      <th>room number</th>\n",
       "      <th>price</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "      <th>building state</th>\n",
       "      <th>area bins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1690000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1985000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3333000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29524</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>76.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1480000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1990.0</td>\n",
       "      <td>127.8</td>\n",
       "      <td>appartment</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1900000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192270</th>\n",
       "      <td>1992.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1860000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19161</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192271</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2065000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19042</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192272</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>3.0</td>\n",
       "      <td>870000</td>\n",
       "      <td>2019</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192273</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>925000</td>\n",
       "      <td>2018</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192274</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1020000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>192275 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        building year  surface area          description  room number  \\\n",
       "0              1970.0          82.1           appartment          3.0   \n",
       "1              1970.0         115.0           appartment          4.0   \n",
       "2              1970.0         110.0           appartment          3.0   \n",
       "3              1970.0          76.1           appartment          3.0   \n",
       "4              1990.0         127.8           appartment          5.0   \n",
       "...               ...           ...                  ...          ...   \n",
       "192270         1992.0         210.0  single ground house          5.0   \n",
       "192271         2000.0         200.0  single ground house          8.0   \n",
       "192272         1998.0          89.0  single ground house          3.0   \n",
       "192273         1998.0         101.0  single ground house          5.0   \n",
       "192274         2000.0         200.0  single ground house          7.0   \n",
       "\n",
       "          price  deal_year  gush_number building state      area bins  \n",
       "0       1690000       2019        29536            old   50 < A < 100  \n",
       "1       1985000       2019        29536            old  100 < A < 150  \n",
       "2       3333000       2018        29524            old  100 < A < 150  \n",
       "3       1480000       2018        29536            old   50 < A < 100  \n",
       "4       1900000       2018        29536            old  100 < A < 150  \n",
       "...         ...        ...          ...            ...            ...  \n",
       "192270  1860000       2017        19161            old        A > 200  \n",
       "192271  2065000       2017        19042            old        A > 200  \n",
       "192272   870000       2019        19255            old   50 < A < 100  \n",
       "192273   925000       2018        19255            old  100 < A < 150  \n",
       "192274  1020000       2017        19255            old        A > 200  \n",
       "\n",
       "[192275 rows x 9 columns]"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recent_deal_copy4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "recent_deal_copy4.to_csv(r'C:\\Users\\majac\\Desktop\\Projects\\Real-estate-israel\\recent_deal.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "file_stop_gush = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\PublicTransport\\GushAndBus_stopFinal.csv'\n",
    "rest_gush = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\intermediate csv files\\restaurant.csv'\n",
    "school_gush = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\intermediate csv files\\school_education_in_gush2.csv'\n",
    "city_gush1 = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\intermediate csv files\\city_names _ID.csv'\n",
    "city_gush2 = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\intermediate csv files\\city_names _IDSTRIP.csv'\n",
    "loc_id_gush = r'C:\\Users\\majac\\Desktop\\JohnBriceProject\\intermediate csv files\\locID_gushNUM.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building year</th>\n",
       "      <th>surface area</th>\n",
       "      <th>description</th>\n",
       "      <th>room number</th>\n",
       "      <th>price</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "      <th>building state</th>\n",
       "      <th>area bins</th>\n",
       "      <th>number of bus stops</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1690000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1985000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3333000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29524</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>76.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1480000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1990.0</td>\n",
       "      <td>127.8</td>\n",
       "      <td>appartment</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1900000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192270</th>\n",
       "      <td>1992.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1860000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19161</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192271</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2065000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19042</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192272</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>3.0</td>\n",
       "      <td>870000</td>\n",
       "      <td>2019</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192273</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>925000</td>\n",
       "      <td>2018</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192274</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1020000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>192275 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        building year  surface area          description  room number  \\\n",
       "0              1970.0          82.1           appartment          3.0   \n",
       "1              1970.0         115.0           appartment          4.0   \n",
       "2              1970.0         110.0           appartment          3.0   \n",
       "3              1970.0          76.1           appartment          3.0   \n",
       "4              1990.0         127.8           appartment          5.0   \n",
       "...               ...           ...                  ...          ...   \n",
       "192270         1992.0         210.0  single ground house          5.0   \n",
       "192271         2000.0         200.0  single ground house          8.0   \n",
       "192272         1998.0          89.0  single ground house          3.0   \n",
       "192273         1998.0         101.0  single ground house          5.0   \n",
       "192274         2000.0         200.0  single ground house          7.0   \n",
       "\n",
       "          price  deal_year  gush_number building state      area bins  \\\n",
       "0       1690000       2019        29536            old   50 < A < 100   \n",
       "1       1985000       2019        29536            old  100 < A < 150   \n",
       "2       3333000       2018        29524            old  100 < A < 150   \n",
       "3       1480000       2018        29536            old   50 < A < 100   \n",
       "4       1900000       2018        29536            old  100 < A < 150   \n",
       "...         ...        ...          ...            ...            ...   \n",
       "192270  1860000       2017        19161            old        A > 200   \n",
       "192271  2065000       2017        19042            old        A > 200   \n",
       "192272   870000       2019        19255            old   50 < A < 100   \n",
       "192273   925000       2018        19255            old  100 < A < 150   \n",
       "192274  1020000       2017        19255            old        A > 200   \n",
       "\n",
       "        number of bus stops  \n",
       "0                      10.0  \n",
       "1                      10.0  \n",
       "2                       1.0  \n",
       "3                      10.0  \n",
       "4                      10.0  \n",
       "...                     ...  \n",
       "192270                  NaN  \n",
       "192271                  1.0  \n",
       "192272                  1.0  \n",
       "192273                  1.0  \n",
       "192274                  1.0  \n",
       "\n",
       "[192275 rows x 10 columns]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bus_gush = pd.read_csv(file_stop_gush)\n",
    "### removing not found row at index 6930\n",
    "bus_gush2 = bus_gush.drop(axis=0, index=6930)\n",
    "bus_gush2.columns = ['gush_number', 'number of bus stops']\n",
    "bus_gush2['gush_number'] = bus_gush2['gush_number'].astype(int)\n",
    "df_nadlan = recent_deal_copy4.merge(bus_gush2, on ='gush_number',how ='left')\n",
    "df_nadlan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building year</th>\n",
       "      <th>surface area</th>\n",
       "      <th>description</th>\n",
       "      <th>room number</th>\n",
       "      <th>price</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "      <th>building state</th>\n",
       "      <th>area bins</th>\n",
       "      <th>number of bus stops</th>\n",
       "      <th>restaurant_number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1690000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1985000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3333000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29524</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>76.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1480000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1990.0</td>\n",
       "      <td>127.8</td>\n",
       "      <td>appartment</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1900000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192270</th>\n",
       "      <td>1992.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1860000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19161</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192271</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2065000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19042</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192272</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>3.0</td>\n",
       "      <td>870000</td>\n",
       "      <td>2019</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192273</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>925000</td>\n",
       "      <td>2018</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192274</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1020000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>192275 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        building year  surface area          description  room number  \\\n",
       "0              1970.0          82.1           appartment          3.0   \n",
       "1              1970.0         115.0           appartment          4.0   \n",
       "2              1970.0         110.0           appartment          3.0   \n",
       "3              1970.0          76.1           appartment          3.0   \n",
       "4              1990.0         127.8           appartment          5.0   \n",
       "...               ...           ...                  ...          ...   \n",
       "192270         1992.0         210.0  single ground house          5.0   \n",
       "192271         2000.0         200.0  single ground house          8.0   \n",
       "192272         1998.0          89.0  single ground house          3.0   \n",
       "192273         1998.0         101.0  single ground house          5.0   \n",
       "192274         2000.0         200.0  single ground house          7.0   \n",
       "\n",
       "          price  deal_year  gush_number building state      area bins  \\\n",
       "0       1690000       2019        29536            old   50 < A < 100   \n",
       "1       1985000       2019        29536            old  100 < A < 150   \n",
       "2       3333000       2018        29524            old  100 < A < 150   \n",
       "3       1480000       2018        29536            old   50 < A < 100   \n",
       "4       1900000       2018        29536            old  100 < A < 150   \n",
       "...         ...        ...          ...            ...            ...   \n",
       "192270  1860000       2017        19161            old        A > 200   \n",
       "192271  2065000       2017        19042            old        A > 200   \n",
       "192272   870000       2019        19255            old   50 < A < 100   \n",
       "192273   925000       2018        19255            old  100 < A < 150   \n",
       "192274  1020000       2017        19255            old        A > 200   \n",
       "\n",
       "        number of bus stops  restaurant_number  \n",
       "0                      10.0               40.0  \n",
       "1                      10.0               40.0  \n",
       "2                       1.0               50.0  \n",
       "3                      10.0               40.0  \n",
       "4                      10.0               40.0  \n",
       "...                     ...                ...  \n",
       "192270                  NaN               36.0  \n",
       "192271                  1.0               55.0  \n",
       "192272                  1.0               11.0  \n",
       "192273                  1.0               11.0  \n",
       "192274                  1.0               11.0  \n",
       "\n",
       "[192275 rows x 11 columns]"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "restaurant_df = pd.read_csv(rest_gush)\n",
    "restaurant_df2 = restaurant_df.drop(columns = ['Unnamed: 0', 'lat_lon'])\n",
    "restaurant_df2['gush_number'] = restaurant_df2['gush_number'].astype('int')\n",
    "cop1_df_nadlan = df_nadlan.merge(restaurant_df2, on ='gush_number',how ='left')\n",
    "cop1_df_nadlan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>building year</th>\n",
       "      <th>surface area</th>\n",
       "      <th>description</th>\n",
       "      <th>room number</th>\n",
       "      <th>price</th>\n",
       "      <th>deal_year</th>\n",
       "      <th>gush_number</th>\n",
       "      <th>building state</th>\n",
       "      <th>area bins</th>\n",
       "      <th>number of bus stops</th>\n",
       "      <th>restaurant_number</th>\n",
       "      <th>school_gan</th>\n",
       "      <th>education_type</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>religious or not</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>82.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1690000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>H</td>\n",
       "      <td>J</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1985000</td>\n",
       "      <td>2019</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>H</td>\n",
       "      <td>J</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3333000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29524</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1970.0</td>\n",
       "      <td>76.1</td>\n",
       "      <td>appartment</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1480000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>H</td>\n",
       "      <td>J</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1990.0</td>\n",
       "      <td>127.8</td>\n",
       "      <td>appartment</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1900000</td>\n",
       "      <td>2018</td>\n",
       "      <td>29536</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>10.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>H</td>\n",
       "      <td>J</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192270</th>\n",
       "      <td>1992.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1860000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19161</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192271</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2065000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19042</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>M</td>\n",
       "      <td>J</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192272</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>3.0</td>\n",
       "      <td>870000</td>\n",
       "      <td>2019</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>50 &lt; A &lt; 100</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>M</td>\n",
       "      <td>J</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192273</th>\n",
       "      <td>1998.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>5.0</td>\n",
       "      <td>925000</td>\n",
       "      <td>2018</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>100 &lt; A &lt; 150</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>M</td>\n",
       "      <td>J</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192274</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>single ground house</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1020000</td>\n",
       "      <td>2017</td>\n",
       "      <td>19255</td>\n",
       "      <td>old</td>\n",
       "      <td>A &gt; 200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>M</td>\n",
       "      <td>J</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>192275 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        building year  surface area          description  room number  \\\n",
       "0              1970.0          82.1           appartment          3.0   \n",
       "1              1970.0         115.0           appartment          4.0   \n",
       "2              1970.0         110.0           appartment          3.0   \n",
       "3              1970.0          76.1           appartment          3.0   \n",
       "4              1990.0         127.8           appartment          5.0   \n",
       "...               ...           ...                  ...          ...   \n",
       "192270         1992.0         210.0  single ground house          5.0   \n",
       "192271         2000.0         200.0  single ground house          8.0   \n",
       "192272         1998.0          89.0  single ground house          3.0   \n",
       "192273         1998.0         101.0  single ground house          5.0   \n",
       "192274         2000.0         200.0  single ground house          7.0   \n",
       "\n",
       "          price  deal_year  gush_number building state      area bins  \\\n",
       "0       1690000       2019        29536            old   50 < A < 100   \n",
       "1       1985000       2019        29536            old  100 < A < 150   \n",
       "2       3333000       2018        29524            old  100 < A < 150   \n",
       "3       1480000       2018        29536            old   50 < A < 100   \n",
       "4       1900000       2018        29536            old  100 < A < 150   \n",
       "...         ...        ...          ...            ...            ...   \n",
       "192270  1860000       2017        19161            old        A > 200   \n",
       "192271  2065000       2017        19042            old        A > 200   \n",
       "192272   870000       2019        19255            old   50 < A < 100   \n",
       "192273   925000       2018        19255            old  100 < A < 150   \n",
       "192274  1020000       2017        19255            old        A > 200   \n",
       "\n",
       "        number of bus stops  restaurant_number  school_gan education_type  \\\n",
       "0                      10.0               40.0         2.0              H   \n",
       "1                      10.0               40.0         2.0              H   \n",
       "2                       1.0               50.0         2.0              A   \n",
       "3                      10.0               40.0         2.0              H   \n",
       "4                      10.0               40.0         2.0              H   \n",
       "...                     ...                ...         ...            ...   \n",
       "192270                  NaN               36.0         NaN            NaN   \n",
       "192271                  1.0               55.0         1.0              M   \n",
       "192272                  1.0               11.0         3.0              M   \n",
       "192273                  1.0               11.0         3.0              M   \n",
       "192274                  1.0               11.0         3.0              M   \n",
       "\n",
       "       ethnicity  religious or not  \n",
       "0              J               4.0  \n",
       "1              J               4.0  \n",
       "2              A               1.0  \n",
       "3              J               4.0  \n",
       "4              J               4.0  \n",
       "...          ...               ...  \n",
       "192270       NaN               NaN  \n",
       "192271         J               2.0  \n",
       "192272         J               2.0  \n",
       "192273         J               2.0  \n",
       "192274         J               2.0  \n",
       "\n",
       "[192275 rows x 15 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "school_df = pd.read_csv(school_gush)\n",
    "school_df['gush_number'] = school_df['gush_number'].astype('int')\n",
    "cop2_df_nadlan = cop1_df_nadlan.merge(school_df, on ='gush_number',how ='left')\n",
    "cop2_df_nadlan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 192421 entries, 0 to 192420\n",
      "Data columns (total 16 columns):\n",
      " #   Column               Non-Null Count   Dtype  \n",
      "---  ------               --------------   -----  \n",
      " 0   building year        192421 non-null  float64\n",
      " 1   surface area         192421 non-null  float64\n",
      " 2   description          192421 non-null  object \n",
      " 3   room number          192421 non-null  float64\n",
      " 4   price                192421 non-null  int32  \n",
      " 5   deal_year            192421 non-null  int32  \n",
      " 6   gush_number          192421 non-null  int32  \n",
      " 7   building state       192421 non-null  object \n",
      " 8   area bins            192421 non-null  object \n",
      " 9   number of bus stops  163158 non-null  float64\n",
      " 10  restaurant_number    185683 non-null  float64\n",
      " 11  school_gan           129677 non-null  float64\n",
      " 12  education_type       129677 non-null  object \n",
      " 13  ethnicity            129677 non-null  object \n",
      " 14  religious or not     129677 non-null  float64\n",
      " 15  Locality ID          185683 non-null  float64\n",
      "dtypes: float64(8), int32(3), object(5)\n",
      "memory usage: 22.8+ MB\n"
     ]
    }
   ],
   "source": [
    "id_gush_df = pd.read_csv(loc_id_gush)\n",
    "id_gush_df['gush_number'] = id_gush_df['gush_number'].astype('int')\n",
    "cop3_df_nadlan = cop2_df_nadlan.merge(id_gush_df, on ='gush_number',how ='left')\n",
    "cop3_df_nadlan.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 192421 entries, 0 to 192420\n",
      "Data columns (total 17 columns):\n",
      " #   Column               Non-Null Count   Dtype  \n",
      "---  ------               --------------   -----  \n",
      " 0   building year        192421 non-null  float64\n",
      " 1   surface area         192421 non-null  float64\n",
      " 2   description          192421 non-null  object \n",
      " 3   room number          192421 non-null  float64\n",
      " 4   price                192421 non-null  int32  \n",
      " 5   deal_year            192421 non-null  int32  \n",
      " 6   gush_number          192421 non-null  int32  \n",
      " 7   building state       192421 non-null  object \n",
      " 8   area bins            192421 non-null  object \n",
      " 9   number of bus stops  163158 non-null  float64\n",
      " 10  restaurant_number    185683 non-null  float64\n",
      " 11  school_gan           129677 non-null  float64\n",
      " 12  education_type       129677 non-null  object \n",
      " 13  ethnicity            129677 non-null  object \n",
      " 14  religious or not     129677 non-null  float64\n",
      " 15  Locality ID          185683 non-null  float64\n",
      " 16  city_name            184571 non-null  object \n",
      "dtypes: float64(8), int32(3), object(6)\n",
      "memory usage: 24.2+ MB\n"
     ]
    }
   ],
   "source": [
    "id_city = pd.read_csv(city_gush1)\n",
    "id_city.columns = ['Locality ID', 'city_name']\n",
    "cop4_df_nadlan = cop3_df_nadlan.merge(id_city, on ='Locality ID',how ='left')\n",
    "cop4_df_nadlan.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "cop4_df_nadlan.to_csv(r'C:\\Users\\majac\\Desktop\\Projects\\Real-estate-israel\\DealandGushAtribute.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
